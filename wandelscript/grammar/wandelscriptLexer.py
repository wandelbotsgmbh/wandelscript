# Generated from wandelscriptLexer.g4 by ANTLR 4.13.2
import sys
from io import StringIO

from antlr4 import *

if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


if "." in __name__:
    from .WandelscriptLexerBase import WandelscriptLexerBase
else:
    from WandelscriptLexerBase import WandelscriptLexerBase

def serializedATN():
    return [
        4,0,71,508,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,1,0,1,
        0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,
        5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,
        1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,
        1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,
        1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,1,43,1,43,
        1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,
        1,45,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,
        1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,53,1,53,
        1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,379,8,54,1,55,1,55,
        1,55,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,
        1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,59,1,59,1,59,1,59,1,59,1,59,
        1,60,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,
        1,62,1,62,1,62,1,63,4,63,426,8,63,11,63,12,63,427,1,64,4,64,431,
        8,64,11,64,12,64,432,1,64,1,64,4,64,437,8,64,11,64,12,64,438,1,64,
        1,64,1,64,1,64,1,64,3,64,446,8,64,1,65,1,65,5,65,450,8,65,10,65,
        12,65,453,9,65,1,65,1,65,1,65,5,65,458,8,65,10,65,12,65,461,9,65,
        1,65,3,65,464,8,65,1,66,3,66,467,8,66,1,66,5,66,470,8,66,10,66,12,
        66,473,9,66,1,67,1,67,1,67,3,67,478,8,67,1,67,1,67,3,67,482,8,67,
        1,67,3,67,485,8,67,3,67,487,8,67,1,67,1,67,1,68,1,68,3,68,493,8,
        68,1,68,1,68,1,69,4,69,498,8,69,11,69,12,69,499,1,70,1,70,5,70,504,
        8,70,10,70,12,70,507,9,70,0,0,71,1,3,3,4,5,5,7,6,9,7,11,8,13,9,15,
        10,17,11,19,12,21,13,23,14,25,15,27,16,29,17,31,18,33,19,35,20,37,
        21,39,22,41,23,43,24,45,25,47,26,49,27,51,28,53,29,55,30,57,31,59,
        32,61,33,63,34,65,35,67,36,69,37,71,38,73,39,75,40,77,41,79,42,81,
        43,83,44,85,45,87,46,89,47,91,48,93,49,95,50,97,51,99,52,101,53,
        103,54,105,55,107,56,109,57,111,58,113,59,115,60,117,61,119,62,121,
        63,123,64,125,65,127,66,129,67,131,68,133,69,135,70,137,71,139,0,
        141,0,1,0,7,1,0,48,57,4,0,10,10,12,13,39,39,92,92,4,0,10,10,12,13,
        34,34,92,92,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,
        2,0,9,9,32,32,2,0,10,10,12,13,522,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
        0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
        1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
        0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,
        0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,0,0,0,
        133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,1,143,1,0,0,0,3,146,1,0,
        0,0,5,149,1,0,0,0,7,152,1,0,0,0,9,155,1,0,0,0,11,158,1,0,0,0,13,
        161,1,0,0,0,15,163,1,0,0,0,17,165,1,0,0,0,19,167,1,0,0,0,21,169,
        1,0,0,0,23,171,1,0,0,0,25,173,1,0,0,0,27,175,1,0,0,0,29,177,1,0,
        0,0,31,179,1,0,0,0,33,181,1,0,0,0,35,183,1,0,0,0,37,185,1,0,0,0,
        39,188,1,0,0,0,41,191,1,0,0,0,43,194,1,0,0,0,45,197,1,0,0,0,47,200,
        1,0,0,0,49,203,1,0,0,0,51,207,1,0,0,0,53,212,1,0,0,0,55,216,1,0,
        0,0,57,219,1,0,0,0,59,227,1,0,0,0,61,232,1,0,0,0,63,236,1,0,0,0,
        65,243,1,0,0,0,67,248,1,0,0,0,69,251,1,0,0,0,71,256,1,0,0,0,73,262,
        1,0,0,0,75,269,1,0,0,0,77,274,1,0,0,0,79,283,1,0,0,0,81,288,1,0,
        0,0,83,292,1,0,0,0,85,295,1,0,0,0,87,302,1,0,0,0,89,308,1,0,0,0,
        91,314,1,0,0,0,93,319,1,0,0,0,95,323,1,0,0,0,97,327,1,0,0,0,99,330,
        1,0,0,0,101,333,1,0,0,0,103,338,1,0,0,0,105,345,1,0,0,0,107,355,
        1,0,0,0,109,378,1,0,0,0,111,380,1,0,0,0,113,385,1,0,0,0,115,391,
        1,0,0,0,117,397,1,0,0,0,119,402,1,0,0,0,121,408,1,0,0,0,123,413,
        1,0,0,0,125,418,1,0,0,0,127,425,1,0,0,0,129,445,1,0,0,0,131,463,
        1,0,0,0,133,466,1,0,0,0,135,486,1,0,0,0,137,492,1,0,0,0,139,497,
        1,0,0,0,141,501,1,0,0,0,143,144,5,40,0,0,144,145,6,0,0,0,145,2,1,
        0,0,0,146,147,5,41,0,0,147,148,6,1,1,0,148,4,1,0,0,0,149,150,5,91,
        0,0,150,151,6,2,2,0,151,6,1,0,0,0,152,153,5,93,0,0,153,154,6,3,3,
        0,154,8,1,0,0,0,155,156,5,123,0,0,156,157,6,4,4,0,157,10,1,0,0,0,
        158,159,5,125,0,0,159,160,6,5,5,0,160,12,1,0,0,0,161,162,5,46,0,
        0,162,14,1,0,0,0,163,164,5,44,0,0,164,16,1,0,0,0,165,166,5,58,0,
        0,166,18,1,0,0,0,167,168,5,43,0,0,168,20,1,0,0,0,169,170,5,45,0,
        0,170,22,1,0,0,0,171,172,5,42,0,0,172,24,1,0,0,0,173,174,5,47,0,
        0,174,26,1,0,0,0,175,176,5,124,0,0,176,28,1,0,0,0,177,178,5,126,
        0,0,178,30,1,0,0,0,179,180,5,60,0,0,180,32,1,0,0,0,181,182,5,62,
        0,0,182,34,1,0,0,0,183,184,5,61,0,0,184,36,1,0,0,0,185,186,5,58,
        0,0,186,187,5,58,0,0,187,38,1,0,0,0,188,189,5,61,0,0,189,190,5,61,
        0,0,190,40,1,0,0,0,191,192,5,33,0,0,192,193,5,61,0,0,193,42,1,0,
        0,0,194,195,5,60,0,0,195,196,5,61,0,0,196,44,1,0,0,0,197,198,5,62,
        0,0,198,199,5,61,0,0,199,46,1,0,0,0,200,201,5,46,0,0,201,202,5,46,
        0,0,202,48,1,0,0,0,203,204,5,46,0,0,204,205,5,46,0,0,205,206,5,46,
        0,0,206,50,1,0,0,0,207,208,5,109,0,0,208,209,5,111,0,0,209,210,5,
        118,0,0,210,211,5,101,0,0,211,52,1,0,0,0,212,213,5,118,0,0,213,214,
        5,105,0,0,214,215,5,97,0,0,215,54,1,0,0,0,216,217,5,116,0,0,217,
        218,5,111,0,0,218,56,1,0,0,0,219,220,5,109,0,0,220,221,5,111,0,0,
        221,222,5,118,0,0,222,223,5,101,0,0,223,224,5,100,0,0,224,225,5,
        101,0,0,225,226,5,102,0,0,226,58,1,0,0,0,227,228,5,62,0,0,228,229,
        5,45,0,0,229,230,5,45,0,0,230,231,5,62,0,0,231,60,1,0,0,0,232,233,
        5,100,0,0,233,234,5,101,0,0,234,235,5,102,0,0,235,62,1,0,0,0,236,
        237,5,114,0,0,237,238,5,101,0,0,238,239,5,116,0,0,239,240,5,117,
        0,0,240,241,5,114,0,0,241,242,5,110,0,0,242,64,1,0,0,0,243,244,5,
        112,0,0,244,245,5,97,0,0,245,246,5,115,0,0,246,247,5,115,0,0,247,
        66,1,0,0,0,248,249,5,105,0,0,249,250,5,102,0,0,250,68,1,0,0,0,251,
        252,5,101,0,0,252,253,5,108,0,0,253,254,5,105,0,0,254,255,5,102,
        0,0,255,70,1,0,0,0,256,257,5,101,0,0,257,258,5,108,0,0,258,259,5,
        115,0,0,259,260,5,101,0,0,260,261,5,58,0,0,261,72,1,0,0,0,262,263,
        5,115,0,0,263,264,5,119,0,0,264,265,5,105,0,0,265,266,5,116,0,0,
        266,267,5,99,0,0,267,268,5,104,0,0,268,74,1,0,0,0,269,270,5,99,0,
        0,270,271,5,97,0,0,271,272,5,115,0,0,272,273,5,101,0,0,273,76,1,
        0,0,0,274,275,5,100,0,0,275,276,5,101,0,0,276,277,5,102,0,0,277,
        278,5,97,0,0,278,279,5,117,0,0,279,280,5,108,0,0,280,281,5,116,0,
        0,281,282,5,58,0,0,282,78,1,0,0,0,283,284,5,119,0,0,284,285,5,105,
        0,0,285,286,5,116,0,0,286,287,5,104,0,0,287,80,1,0,0,0,288,289,5,
        102,0,0,289,290,5,111,0,0,290,291,5,114,0,0,291,82,1,0,0,0,292,293,
        5,105,0,0,293,294,5,110,0,0,294,84,1,0,0,0,295,296,5,114,0,0,296,
        297,5,101,0,0,297,298,5,112,0,0,298,299,5,101,0,0,299,300,5,97,0,
        0,300,301,5,116,0,0,301,86,1,0,0,0,302,303,5,119,0,0,303,304,5,104,
        0,0,304,305,5,105,0,0,305,306,5,108,0,0,306,307,5,101,0,0,307,88,
        1,0,0,0,308,309,5,98,0,0,309,310,5,114,0,0,310,311,5,101,0,0,311,
        312,5,97,0,0,312,313,5,107,0,0,313,90,1,0,0,0,314,315,5,115,0,0,
        315,316,5,116,0,0,316,317,5,111,0,0,317,318,5,112,0,0,318,92,1,0,
        0,0,319,320,5,110,0,0,320,321,5,111,0,0,321,322,5,116,0,0,322,94,
        1,0,0,0,323,324,5,97,0,0,324,325,5,110,0,0,325,326,5,100,0,0,326,
        96,1,0,0,0,327,328,5,111,0,0,328,329,5,114,0,0,329,98,1,0,0,0,330,
        331,5,100,0,0,331,332,5,111,0,0,332,100,1,0,0,0,333,334,5,115,0,
        0,334,335,5,121,0,0,335,336,5,110,0,0,336,337,5,99,0,0,337,102,1,
        0,0,0,338,339,5,101,0,0,339,340,5,120,0,0,340,341,5,99,0,0,341,342,
        5,101,0,0,342,343,5,112,0,0,343,344,5,116,0,0,344,104,1,0,0,0,345,
        346,5,105,0,0,346,347,5,110,0,0,347,348,5,116,0,0,348,349,5,101,
        0,0,349,350,5,114,0,0,350,351,5,114,0,0,351,352,5,117,0,0,352,353,
        5,112,0,0,353,354,5,116,0,0,354,106,1,0,0,0,355,356,5,119,0,0,356,
        357,5,104,0,0,357,358,5,101,0,0,358,359,5,110,0,0,359,108,1,0,0,
        0,360,361,5,97,0,0,361,362,5,99,0,0,362,363,5,116,0,0,363,364,5,
        105,0,0,364,365,5,118,0,0,365,366,5,97,0,0,366,367,5,116,0,0,367,
        379,5,101,0,0,368,369,5,100,0,0,369,370,5,101,0,0,370,371,5,97,0,
        0,371,372,5,99,0,0,372,373,5,116,0,0,373,374,5,105,0,0,374,375,5,
        118,0,0,375,376,5,97,0,0,376,377,5,116,0,0,377,379,5,101,0,0,378,
        360,1,0,0,0,378,368,1,0,0,0,379,110,1,0,0,0,380,381,5,119,0,0,381,
        382,5,97,0,0,382,383,5,105,0,0,383,384,5,116,0,0,384,112,1,0,0,0,
        385,386,5,114,0,0,386,387,5,97,0,0,387,388,5,105,0,0,388,389,5,115,
        0,0,389,390,5,101,0,0,390,114,1,0,0,0,391,392,5,112,0,0,392,393,
        5,114,0,0,393,394,5,105,0,0,394,395,5,110,0,0,395,396,5,116,0,0,
        396,116,1,0,0,0,397,398,5,114,0,0,398,399,5,101,0,0,399,400,5,97,
        0,0,400,401,5,100,0,0,401,118,1,0,0,0,402,403,5,119,0,0,403,404,
        5,114,0,0,404,405,5,105,0,0,405,406,5,116,0,0,406,407,5,101,0,0,
        407,120,1,0,0,0,408,409,5,99,0,0,409,410,5,97,0,0,410,411,5,108,
        0,0,411,412,5,108,0,0,412,122,1,0,0,0,413,414,5,84,0,0,414,415,5,
        114,0,0,415,416,5,117,0,0,416,417,5,101,0,0,417,124,1,0,0,0,418,
        419,5,70,0,0,419,420,5,97,0,0,420,421,5,108,0,0,421,422,5,115,0,
        0,422,423,5,101,0,0,423,126,1,0,0,0,424,426,7,0,0,0,425,424,1,0,
        0,0,426,427,1,0,0,0,427,425,1,0,0,0,427,428,1,0,0,0,428,128,1,0,
        0,0,429,431,7,0,0,0,430,429,1,0,0,0,431,432,1,0,0,0,432,430,1,0,
        0,0,432,433,1,0,0,0,433,434,1,0,0,0,434,436,5,46,0,0,435,437,7,0,
        0,0,436,435,1,0,0,0,437,438,1,0,0,0,438,436,1,0,0,0,438,439,1,0,
        0,0,439,446,1,0,0,0,440,441,5,112,0,0,441,446,5,105,0,0,442,443,
        5,105,0,0,443,444,5,110,0,0,444,446,5,102,0,0,445,430,1,0,0,0,445,
        440,1,0,0,0,445,442,1,0,0,0,446,130,1,0,0,0,447,451,5,39,0,0,448,
        450,8,1,0,0,449,448,1,0,0,0,450,453,1,0,0,0,451,449,1,0,0,0,451,
        452,1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,464,5,39,0,0,455,
        459,5,34,0,0,456,458,8,2,0,0,457,456,1,0,0,0,458,461,1,0,0,0,459,
        457,1,0,0,0,459,460,1,0,0,0,460,462,1,0,0,0,461,459,1,0,0,0,462,
        464,5,34,0,0,463,447,1,0,0,0,463,455,1,0,0,0,464,132,1,0,0,0,465,
        467,7,3,0,0,466,465,1,0,0,0,467,471,1,0,0,0,468,470,7,4,0,0,469,
        468,1,0,0,0,470,473,1,0,0,0,471,469,1,0,0,0,471,472,1,0,0,0,472,
        134,1,0,0,0,473,471,1,0,0,0,474,475,4,67,0,0,475,487,3,139,69,0,
        476,478,5,13,0,0,477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,
        479,482,5,10,0,0,480,482,2,12,13,0,481,477,1,0,0,0,481,480,1,0,0,
        0,482,484,1,0,0,0,483,485,3,139,69,0,484,483,1,0,0,0,484,485,1,0,
        0,0,485,487,1,0,0,0,486,474,1,0,0,0,486,481,1,0,0,0,487,488,1,0,
        0,0,488,489,6,67,6,0,489,136,1,0,0,0,490,493,3,139,69,0,491,493,
        3,141,70,0,492,490,1,0,0,0,492,491,1,0,0,0,493,494,1,0,0,0,494,495,
        6,68,7,0,495,138,1,0,0,0,496,498,7,5,0,0,497,496,1,0,0,0,498,499,
        1,0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,140,1,0,0,0,501,505,
        5,35,0,0,502,504,8,6,0,0,503,502,1,0,0,0,504,507,1,0,0,0,505,503,
        1,0,0,0,505,506,1,0,0,0,506,142,1,0,0,0,507,505,1,0,0,0,19,0,378,
        427,432,438,445,451,459,463,466,469,471,477,481,484,486,492,499,
        505,8,1,0,0,1,1,1,1,2,2,1,3,3,1,4,4,1,5,5,1,67,6,0,1,0
    ]

class wandelscriptLexer(WandelscriptLexerBase):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INDENT = 1
    DEDENT = 2
    OPEN_PARENS = 3
    CLOSE_PARENS = 4
    OPEN_BRACKET = 5
    CLOSE_BRACKET = 6
    OPEN_BRACE = 7
    CLOSE_BRACE = 8
    DOT = 9
    COMMA = 10
    COLON = 11
    PLUS = 12
    MINUS = 13
    STAR = 14
    DIV = 15
    BITWISE_OR = 16
    TILDE = 17
    LT = 18
    GT = 19
    OP_ASSIGNMENT = 20
    DOUBLE_COLON = 21
    OP_EQ = 22
    OP_NE = 23
    OP_LE = 24
    OP_GE = 25
    OP_RANGE = 26
    ORIENTATION_ELLIPSIS = 27
    MOVE = 28
    VIA = 29
    TO = 30
    MOVEDEF = 31
    MOVEDEV_ARROW = 32
    DEF = 33
    RETURN = 34
    PASS = 35
    IF = 36
    ELIF = 37
    ELSE = 38
    SWITCH = 39
    CASE = 40
    DEFAULT = 41
    WITH = 42
    FOR = 43
    IN = 44
    REPEAT = 45
    WHILE = 46
    BREAK = 47
    STOP = 48
    NOT = 49
    AND = 50
    OR = 51
    DO = 52
    SYNC = 53
    EXCEPT = 54
    INTERRUPT = 55
    WHEN = 56
    ACTIVATE_OR_DEACTIVATE = 57
    WAIT = 58
    RAISE = 59
    PRINT = 60
    READ = 61
    WRITE = 62
    CALL = 63
    TRUE = 64
    FALSE = 65
    INT = 66
    FLOAT = 67
    STRING = 68
    NAME = 69
    NEWLINE = 70
    SKIP_ = 71

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'['", "']'", "'{'", "'}'", "'.'", "','", "':'", 
            "'+'", "'-'", "'*'", "'/'", "'|'", "'~'", "'<'", "'>'", "'='", 
            "'::'", "'=='", "'!='", "'<='", "'>='", "'..'", "'...'", "'move'", 
            "'via'", "'to'", "'movedef'", "'>-->'", "'def'", "'return'", 
            "'pass'", "'if'", "'elif'", "'else:'", "'switch'", "'case'", 
            "'default:'", "'with'", "'for'", "'in'", "'repeat'", "'while'", 
            "'break'", "'stop'", "'not'", "'and'", "'or'", "'do'", "'sync'", 
            "'except'", "'interrupt'", "'when'", "'wait'", "'raise'", "'print'", 
            "'read'", "'write'", "'call'", "'True'", "'False'" ]

    symbolicNames = [ "<INVALID>",
            "INDENT", "DEDENT", "OPEN_PARENS", "CLOSE_PARENS", "OPEN_BRACKET", 
            "CLOSE_BRACKET", "OPEN_BRACE", "CLOSE_BRACE", "DOT", "COMMA", 
            "COLON", "PLUS", "MINUS", "STAR", "DIV", "BITWISE_OR", "TILDE", 
            "LT", "GT", "OP_ASSIGNMENT", "DOUBLE_COLON", "OP_EQ", "OP_NE", 
            "OP_LE", "OP_GE", "OP_RANGE", "ORIENTATION_ELLIPSIS", "MOVE", 
            "VIA", "TO", "MOVEDEF", "MOVEDEV_ARROW", "DEF", "RETURN", "PASS", 
            "IF", "ELIF", "ELSE", "SWITCH", "CASE", "DEFAULT", "WITH", "FOR", 
            "IN", "REPEAT", "WHILE", "BREAK", "STOP", "NOT", "AND", "OR", 
            "DO", "SYNC", "EXCEPT", "INTERRUPT", "WHEN", "ACTIVATE_OR_DEACTIVATE", 
            "WAIT", "RAISE", "PRINT", "READ", "WRITE", "CALL", "TRUE", "FALSE", 
            "INT", "FLOAT", "STRING", "NAME", "NEWLINE", "SKIP_" ]

    ruleNames = [ "OPEN_PARENS", "CLOSE_PARENS", "OPEN_BRACKET", "CLOSE_BRACKET", 
                  "OPEN_BRACE", "CLOSE_BRACE", "DOT", "COMMA", "COLON", 
                  "PLUS", "MINUS", "STAR", "DIV", "BITWISE_OR", "TILDE", 
                  "LT", "GT", "OP_ASSIGNMENT", "DOUBLE_COLON", "OP_EQ", 
                  "OP_NE", "OP_LE", "OP_GE", "OP_RANGE", "ORIENTATION_ELLIPSIS", 
                  "MOVE", "VIA", "TO", "MOVEDEF", "MOVEDEV_ARROW", "DEF", 
                  "RETURN", "PASS", "IF", "ELIF", "ELSE", "SWITCH", "CASE", 
                  "DEFAULT", "WITH", "FOR", "IN", "REPEAT", "WHILE", "BREAK", 
                  "STOP", "NOT", "AND", "OR", "DO", "SYNC", "EXCEPT", "INTERRUPT", 
                  "WHEN", "ACTIVATE_OR_DEACTIVATE", "WAIT", "RAISE", "PRINT", 
                  "READ", "WRITE", "CALL", "TRUE", "FALSE", "INT", "FLOAT", 
                  "STRING", "NAME", "NEWLINE", "SKIP_", "WS", "COMMENT" ]

    grammarFileName = "wandelscriptLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[0] = self.OPEN_PARENS_action 
            actions[1] = self.CLOSE_PARENS_action 
            actions[2] = self.OPEN_BRACKET_action 
            actions[3] = self.CLOSE_BRACKET_action 
            actions[4] = self.OPEN_BRACE_action 
            actions[5] = self.CLOSE_BRACE_action 
            actions[67] = self.NEWLINE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def OPEN_PARENS_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.open_bracket()
     

    def CLOSE_PARENS_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            self.close_bracket()
     

    def OPEN_BRACKET_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            self.open_bracket()
     

    def CLOSE_BRACKET_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            self.close_bracket()
     

    def OPEN_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 4:
            self.open_bracket()
     

    def CLOSE_BRACE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 5:
            self.close_bracket()
     

    def NEWLINE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 6:
            self.on_newline()
     

    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates is None:
            preds = dict()
            preds[67] = self.NEWLINE_sempred
            self._predicates = preds
        pred = self._predicates.get(ruleIndex, None)
        if pred is not None:
            return pred(localctx, predIndex)
        else:
            raise Exception("No registered predicate for:" + str(ruleIndex))

    def NEWLINE_sempred(self, localctx:RuleContext, predIndex:int):
            if predIndex == 0:
                return self.at_start_of_input()
         


